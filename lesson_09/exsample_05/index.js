//! Массивы - Arrays
// массивы в JS динамические (когда создаем массив и потом с ним работаем, мы можем менять длину и его содержимое,элементы могут быть разные )
//* два способа создать массив
const arr1 = []; // 1 способ предпочтительный
const arr2 = new Array(); // 2 способ

//!Массивы могут быть  с чем угодно и какими угодно примитивными и непримитивными сложными данными

const numbers = [1, 2, 5, 66];
const fruits = ['appe', 'orange', 'pear', 'melon']
const party = ['human', 42, undefined, ['man', 'woman']]
console.log(party);

//получение элементов из массива по индексам 
console.log(fruits[0]); // первый элемент массива
console.log(fruits[10]); //если обратиться к несуществующему индексу в массиве - придет underfined (результат математической операции)

//* изменяем существующий элемент в массиве 
fruits[3] = 'watermelon';
console.log(fruits);

//! ЦИКЛЫ(for, while) = используется когда каие нибудь элементы нужно проверить по очереди, конструкция кот позволяет выполнять повторяющиеся действия ====== - это цикл который будет повторять какое то действие пока у нас будет работать условие
//указываем переменную итератор и задаем ей значение 
// пишем условие выхода из цикла
//приращиваем на каждом кругу приращивает по 1 к числу итератору
//Бессконечный цикл который не закончится

for (let i = 0; i < fruits.length; i++) {
    //!цикл(for) (переменая(for) итеретор(i)= в начале 0; условие пока i  будет меньше чем длина фруктов прибавляй на кажном круге итерации по одному /true условие будет выполняться ; Пока i < будет меньше fruits.length мы будем пририщевать увеличевать как каждом круге операции;  i++

    party[i] = i
    console.log(fruits[i]);// мы выводим кло очереди все элементы в массиве
}

//!цикл(while) = 
// пока выполняется условия в круглых скобках, будет происходить действие в фигурных 
// важно указать условие выхода, которое случится рано или поздно - иначе вы попадете в infinity loop

let i = 0;
while (i <= 10) {
    console.log(i);
    //если бы не написали строчку ниже мы бы попали в бесконечный цикл
    i++;
}

let loop = 'infinity loop';
console.log(loop[1]);// выводим вторую букву

let newLoop = "I" + loop.slice(1) // методом sice мы отрезаем симвалы строки / массива до нужного индекса
// через конкатенацию приращиваем новый символ
console.log(newLoop)// поменять букву

// создайте массив строк из пяти элементов - марок автомобилей 
// выведите значение в консоль при помощи цикла for 
// поменяйте первый, и последний элементы местами 
// и вновь распечатайте массив в консоли

const cars = ['Tesla', 'Lexus', 'Mercedes', 'BMW', 'Ferrari'];
let car = cars[0];
cars[0] = cars[cars.length - 1];
cars[cars.length - 1] = car;

for (let i = 0; i < cars.length; i++) {
    console.log(cars[i])
}

// * методы массивов: добавление и удаление элементов
// методы делятся на мутирущие и немутирующие
// первые изменяют исходный массив, вторые нет

//* 1. Push () - мутирующий метод добавляет элемент в конец массива
const students = ['Marina', 'Alex', 'Ira', 'John'];
students.push('Harry Poter');
//console.log(returnedValue);
// при этом возвращенное значение - это число, длинна нового
//! у не ошибитесь и не заведите переменную под это значение с расчетом что вам придет новый массив
console.log(students);

//* 2. Pop() - мутирующий метод удаляет элемент из конца массива
// возвращенное значение - удаленный элемент из массива
let returnedPop = students.pop();

console.log(returnedPop);
console.log(students);

//* 3. Unshift() - мутирующий, добавляет элемент в начало массива
let returnedUnshift = students.unshift('Luke');
console.log(returnedUnshift);
console.log(students);

//* 4. Shift() - мутирующий, удаляет первый элемент из массива
let returnedShift = students.unshift('Luke');
console.log(returnedShift);
console.log(students)

//* Spred syntax
// удобный метод копирования одномерных, вложенных массивов
const berries = ['blueberry', 'watermelon']
//можно забирать элементы из исходного массива, добавляя новые
const berries2 = ['strawbarry', ...berries, 'raspberry']
// можно объединить два масдива в один
const berries3 = [...berries, ...berries2]
console.log(berries2);

//* деструктуризация массивов 
// это способ в одну строчку: объявить новые переменные, забрать данные из массива и положить их в новые переменные
// с массивами деструктуризация работает по индексу
let cities = ['Berlin', 'Hamburg', 'Leipzig', 'Potsdam']
const [berlin, hamburg, leipzig, potsdam] = cities
// если вы пропускаете элементы и не даете под них переменные, вы пропускаете их, но сколько пустых мест - столько и запятых
const [first, , , last] = cities;

console.log(first);
console.log(last);

console.log('hamburg ===>', hamburg);

